{"version":3,"sources":["Utility/svg/cout.svg","Components/pics/squadW.jpg","Utility/Nav.js","Components/About.js","Components/GoogleyEyes.js","Components/HubcapDemo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","navStyle","color","src","cout","className","style","to","exact","About","squadW","alt","GoogleyEyes","lang","di","charset","rel","href","class","HubcapDemo","async","recorder-id","Home","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,0LCgC5BC,MA5Bf,WAEI,IAAMC,EAAW,CACbC,MAAO,SAGX,OACI,6BACI,yBAAKC,IAAKC,IAAMC,UAAU,SAC1B,wBAAIA,UAAU,aACV,kBAAC,IAAD,CAAMC,MAAOL,EAAUM,GAAG,IAAIC,OAAK,GAClC,qCAED,kBAAC,IAAD,CAAMF,MAAOL,EAAUM,GAAG,UACzB,sCAED,kBAAC,IAAD,CAAMD,MAAOL,EAAUM,GAAG,aACtB,yCAEJ,kBAAC,IAAD,CAAMD,MAAOL,EAAUM,GAAG,WACtB,+C,iBCXLE,MAVf,WACI,OACI,6BACI,0CACA,yBAAKN,IAAKO,IAAQC,IAAI,a,MCgCnBC,MApCf,WACI,OACI,0BAAMC,KAAK,KAAKC,GAAG,OACf,8BACI,0BAAMC,QAAQ,UACd,0BAAMC,IAAI,aAAaC,KAAK,cAC5B,iCAEJ,8BACI,yBAAKC,MAAM,QACP,yBAAKA,MAAM,OACP,yBAAKA,MAAM,UAGf,yBAAKA,MAAM,OACP,yBAAKA,MAAM,cCDpBC,MAff,WACI,OACI,6BACI,2CACA,wCAEA,4BAAQC,OAAK,EAACjB,IAAI,qDAClB,qCAAiBkB,cAAY,2B,aCmBzC,IAAMC,EAAO,kBACX,6BACE,4CACA,2DAIWC,EAvBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,KAAK,IAAIhB,OAAK,EAACiB,UAAWH,IACjC,kBAAC,IAAD,CAAOE,KAAK,SAASC,UAAWhB,IAChC,kBAAC,IAAD,CAAOe,KAAK,YAAYC,UAAWb,IACnC,kBAAC,IAAD,CAAOY,KAAK,UAAUC,UAAWN,QCTvBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.52d97bcb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cout.14dc4eba.svg\";","module.exports = __webpack_public_path__ + \"static/media/squadW.ff4fe815.jpg\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport cout from './svg/cout.svg';\r\n\r\nfunction Nav(){\r\n\r\n    const navStyle = {\r\n        color: 'white'\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <img src={cout} className=\"cout\" />    \r\n            <ul className=\"nav-links\">  \r\n                <Link style={navStyle} to=\"/\" exact>\r\n                 <li>Home</li>\r\n                </Link>\r\n                <Link style={navStyle} to=\"/about\">\r\n                 <li>About</li>\r\n                </Link>\r\n                <Link style={navStyle} to=\"/projects\">\r\n                    <li>Projects</li>\r\n                </Link>\r\n                <Link style={navStyle} to=\"/hubcap\">\r\n                    <li>Hubcap Demo</li>\r\n                </Link>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport squadW from './pics/squadW.jpg';\r\n\r\nfunction About(){\r\n    return (\r\n        <div>\r\n            <h1>About Page</h1>\r\n            <img src={squadW} alt=\"squadW\" />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport { SSL_OP_NO_TLSv1_2 } from 'constants';\r\n\r\nfunction GoogleyEyes(){\r\n    return (\r\n        <html lang=\"en\" di=\"ltr\">\r\n            <head>\r\n                <meta charset=\"utf-8\"></meta>\r\n                <link rel=\"stylesheet\" href=\"style.css\"></link>\r\n                <title></title>\r\n            </head>\r\n            <body>\r\n                <div class=\"eyes\">\r\n                    <div class=\"eye\">\r\n                        <div class=\"ball\"></div>\r\n                    </div>\r\n\r\n                    <div class=\"eye\">\r\n                        <div class=\"ball\"></div>\r\n                    </div>\r\n                </div>\r\n\r\n            </body>\r\n        </html>\r\n    );\r\n}\r\n\r\n//var balls = document.getElementsByClassName(\"ball\");\r\n//document.onmousemove = moveEyes(balls);\r\n//function moveEyes(balls){\r\n//    var x = event.clientX * 100 / window.innerWidth + \"%\";\r\n//    var y = event.clientX * 100 / window.innerHeight + \"%\";\r\n\r\n//    for(var i=0;i<2;i++){\r\n//        balls[i].style.left = x;\r\n//        balls[i].style.top = y;\r\n//    }\r\n//}\r\n\r\nexport default GoogleyEyes;\r\n","import React from 'react';\r\n\r\nfunction HubcapDemo(){\r\n    return (\r\n        <div>\r\n            <h1>Hubcap Demo</h1>\r\n            <button>abcd</button>\r\n            \r\n            <script async src=\"https://recorder.hubcap.video/hubcap-recorder.js\"></script>\r\n            <hubcap-recorder recorder-id=\"RGBoaVRYKOoTIboIvesV\"></hubcap-recorder>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default HubcapDemo;\r\n","import React from 'react';\nimport Nav from './Utility/Nav';\nimport About from './Components/About';\nimport Projects from './Components/Projects';\nimport GoogleyEyes from './Components/GoogleyEyes';\nimport HubcapDemo from './Components/HubcapDemo';\nimport {HashRouter as Router, Switch, Route} from 'react-router-dom';\n\nimport './App.css';\n\n//npm run deploy\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/About\" component={About} />\n          <Route path=\"/Projects\" component={GoogleyEyes} />\n          <Route path=\"/hubcap\" component={HubcapDemo} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nconst Home = () => (\n  <div>\n    <h1>Min nettside</h1>\n    <h3>Marcus Hellerud Aadnekvam</h3>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}