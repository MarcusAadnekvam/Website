{"version":3,"sources":["Utility/pics/Qio_Logo.png","Components/pics/squadW.jpg","Utility/svg/cout.svg","Utility/Nav.js","Components/About.js","Components/GoogleyEyes.js","Components/HubcapDemo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","navStyle","color","to","exact","src","qioLogo","className","style","About","squadW","alt","GoogleyEyes","lang","di","charset","rel","href","class","HubcapDemo","async","recorder-id","Home","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,4ECA3CD,EAAOC,QAAU,IAA0B,kC,yICsC5BC,MA/Bf,WAEI,IAAMC,EAAW,CACbC,MAAO,SAEX,OACI,6BACQ,kBAAC,IAAD,CAAMC,GAAG,IAAIC,OAAK,GACd,yBAAKC,IAAKC,IAASC,UAAW,UAGtC,wBAAIA,UAAU,aAEV,kBAAC,IAAD,CAAMC,MAAOP,EAAUE,GAAG,IAAIC,OAAK,GAClC,qCAED,kBAAC,IAAD,CAAMI,MAAOP,EAAUE,GAAG,UACzB,sCAED,kBAAC,IAAD,CAAMK,MAAOP,EAAUE,GAAG,aACtB,yCAEJ,kBAAC,IAAD,CAAMK,MAAOP,EAAUE,GAAG,WACtB,+C,iBCjBLM,MAVf,WACI,OACI,6BACI,0CACA,yBAAKJ,IAAKK,IAAQC,IAAI,a,MCsBnBC,MA1Bf,WACI,OACI,0BAAMC,KAAK,KAAKC,GAAG,OACf,8BACI,0BAAMC,QAAQ,UACd,0BAAMC,IAAI,aAAaC,KAAK,cAC5B,iCAEJ,8BACI,yBAAKC,MAAM,QACP,yBAAKA,MAAM,OACP,yBAAKA,MAAM,UAGf,yBAAKA,MAAM,OACP,yBAAKA,MAAM,cCDpBC,MAff,WACI,OACI,6BACI,2CACA,wCAEA,4BAAQC,OAAK,EAACf,IAAI,qDAClB,qCAAiBgB,cAAY,2B,aCmBzC,IAAMC,EAAO,kBACX,6BACE,4CACA,2DAIWC,EAvBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,KAAK,IAAIpB,OAAK,EAACqB,UAAWH,IACjC,kBAAC,IAAD,CAAOE,KAAK,SAASC,UAAWhB,IAChC,kBAAC,IAAD,CAAOe,KAAK,YAAYC,UAAWb,IACnC,kBAAC,IAAD,CAAOY,KAAK,UAAUC,UAAWN,QCTvBO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8ecc182b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Qio_Logo.8462900a.png\";","module.exports = __webpack_public_path__ + \"static/media/squadW.ff4fe815.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cout.14dc4eba.svg\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport cout from './svg/cout.svg';\r\nimport qioLogo from './pics/Qio_Logo.png';\r\n\r\n\r\n\r\nfunction Nav(){\r\n\r\n    const navStyle = {\r\n        color: 'white'\r\n    }\r\n    return (\r\n        <nav>\r\n                <Link to=\"/\" exact>\r\n                    <img src={qioLogo} className={'logo'} />\r\n                </Link>\r\n            \r\n            <ul className=\"nav-links\"> \r\n\r\n                <Link style={navStyle} to=\"/\" exact>\r\n                 <li>Home</li>\r\n                </Link>\r\n                <Link style={navStyle} to=\"/about\">\r\n                 <li>About</li>\r\n                </Link>\r\n                <Link style={navStyle} to=\"/projects\">\r\n                    <li>Projects</li>\r\n                </Link>\r\n                <Link style={navStyle} to=\"/hubcap\">\r\n                    <li>Hubcap Demo</li>\r\n                </Link>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport squadW from './pics/squadW.jpg';\r\n\r\nfunction About(){\r\n    return (\r\n        <div>\r\n            <h1>About Page</h1>\r\n            <img src={squadW} alt=\"squadW\" />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport { SSL_OP_NO_TLSv1_2 } from 'constants';\r\n\r\nfunction GoogleyEyes(){\r\n    return (\r\n        <html lang=\"en\" di=\"ltr\">\r\n            <head>\r\n                <meta charset=\"utf-8\"></meta>\r\n                <link rel=\"stylesheet\" href=\"style.css\"></link>\r\n                <title></title>\r\n            </head>\r\n            <body>\r\n                <div class=\"eyes\">\r\n                    <div class=\"eye\">\r\n                        <div class=\"ball\"></div>\r\n                    </div>\r\n\r\n                    <div class=\"eye\">\r\n                        <div class=\"ball\"></div>\r\n                    </div>\r\n                </div>\r\n\r\n            </body>\r\n        </html>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default GoogleyEyes;\r\n","import React from 'react';\r\n\r\nfunction HubcapDemo(){\r\n    return (\r\n        <div>\r\n            <h1>Hubcap Demo</h1>\r\n            <button>abcd</button>\r\n            \r\n            <script async src=\"https://recorder.hubcap.video/hubcap-recorder.js\"></script>\r\n            <hubcap-recorder recorder-id=\"RGBoaVRYKOoTIboIvesV\"></hubcap-recorder>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default HubcapDemo;\r\n","import React from 'react';\r\nimport Nav from './Utility/Nav';\r\nimport About from './Components/About';\r\nimport Projects from './Components/Projects';\r\nimport GoogleyEyes from './Components/GoogleyEyes';\r\nimport HubcapDemo from './Components/HubcapDemo';\r\nimport {HashRouter as Router, Switch, Route} from 'react-router-dom';\r\n\r\nimport './App.css';\r\n\r\n//npm run deploy\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Nav />\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Home} />\r\n          <Route path=\"/About\" component={About} />\r\n          <Route path=\"/Projects\" component={GoogleyEyes} />\r\n          <Route path=\"/hubcap\" component={HubcapDemo} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst Home = () => (\r\n  <div>\r\n    <h1>Min nettside</h1>\r\n    <h3>Marcus Hellerud Aadnekvam</h3>\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}